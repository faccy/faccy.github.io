<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-03-19T01:22:13.327Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Faccy</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>并查集</title>
    <link href="http://example.com/2021/03/19/%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
    <id>http://example.com/2021/03/19/%E5%B9%B6%E6%9F%A5%E9%9B%86/</id>
    <published>2021-03-18T23:52:16.348Z</published>
    <updated>2021-03-19T01:22:13.327Z</updated>
    
    <content type="html"><![CDATA[<h1 id="并查集"><a href="#并查集" class="headerlink" title="并查集"></a>并查集</h1><p>并查集的全称是合并-查找集合，顾名思义它的主要功能就是合并查找。</p><p><font color=#09f>合并：合并两个不相交的集合；</font></p><p><font color=#09f>查找：查找两个元素是否在同一个集合中。</font></p><p>并查集是一个集合，但是其逻辑上的结构却类似一个树，主要表现为：<font color=#09f>每一个元素都对应着一个parent结点</font>。我们查找的实质，就是查找元素对应的根结点；合并的操作，也是对被合并的集合元素的根进行修改。（在实际操作中，我们会让parent直接对应根结点，后文在“路径压缩”中会讲到）但是在实际操作中，我们只需要把parent值存在数组中，只要做到“心中有树”即可。</p><p>我们用一个简单的家族关系来举列，比如张爸有两个孩子张三和张四，那么张爸就是张三和张四的parent（张爸视为树的根结点，他的parent为自己），即find(张三) = 张爸，find(张四) = 张爸。find(张三) = find(张四)，则两人在同一家族中；然后李爸也有两个孩子李三和李四，find(李三) = 李爸，find(李四) = 李爸。find(张三) != find(李四)，则张三和李四不属于同一家族。这就是查找的操作。那么合并呢？如果现在发现有一个人张五，是张爸失散多年的孩子，现在要把他归到族谱里，则令parent[张五] = 张爸，这就是合并操作。</p><h2 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h2><p>我们根据上文尝试写出find函数：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (parent[i] == i) &#123;</span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> find(parent[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们很容易发现，当我们进行查找操作时，如果查找的不是根结点，则需要进行递归；如果我刚刚进行了一个结点的查找，然后又继续查找它的parent结点的根结点，那第二次查找的过程是不是完全包含在第一次查找中了？比如根结点为1,1是2的parent，2是3的parent；我先查找3的根结点：find(3) = find(2) = find(1) = 1;再进行查找2的根结点：find(2) = find(1) = 1;可以看出确实是重复了，要解决这个问题，就要用到路径压缩的概念。</p><h3 id="路径压缩"><a href="#路径压缩" class="headerlink" title="路径压缩"></a>路径压缩</h3><p>路径压缩可能听起来很厉害，但是它的思想是很简单而实用的。对应到上文中1-&gt;2-&gt;3的例子，我们只需要在第一次查找的时候，将被查找结点往上的每一个parent都进行修改，因为它们对应的是同一个根结点。比如1-&gt;2-&gt;3-&gt;4-&gt;5，如果我们查找5的根结点，则可以在查找的过程中把2,3,4的parent全部指向1，也就是根结点。此时我们再来修改find函数：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (parent[i] == i) &#123;</span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        parent[i] = find(parent[i]);</span><br><span class="line">        <span class="keyword">return</span> parent[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="合并"><a href="#合并" class="headerlink" title="合并"></a>合并</h2><p>在家族关系的例子中，我们说合并是直接把张五合并到张爸之下，这是因为它们的父子关系是确定的，换言之，就是合并规则是确定的，但是在集合里，每个元素直接并没有这样确定的关系，于是需要我们定义合并规则。普遍的做法是用<strong>秩</strong>，秩其实就是结点所在树的深度，我们习惯将深度小的树合并到深度大的树，因为这样基本不会改变原有的秩。当然反过来合并也不是不可以。</p><p>秩通常也用数组存放，并初始化为1，即单个的结点。</p><p>合并函数：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (i == j) <span class="keyword">return</span>;</span><br><span class="line">    i = find(i);</span><br><span class="line">    j = find(j);</span><br><span class="line">    <span class="keyword">if</span> (i == j) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span> (rank[i] &lt; rank[j]) &#123; <span class="comment">//rank就是存放秩的数组</span></span><br><span class="line">        swap(i, j);</span><br><span class="line">    &#125;</span><br><span class="line">    parent[j] = i;</span><br><span class="line">    <span class="keyword">if</span> (rank[i] == rank[j]) &#123; <span class="comment">//如果两个树的深度相同，被合并的树深度+1</span></span><br><span class="line">        rank[i]++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>并查集的构建，主要就是三部曲：</p><ol><li>初始化</li><li>构建查找函数</li><li>构建合并函数</li></ol><p>完整代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; parent, rank;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123; <span class="comment">//初始化，n为结点数</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        parent.push_back(i);</span><br><span class="line">        rank.push_back(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (parent[i] == i) &#123;</span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        parent[i] = find(parent[i]);</span><br><span class="line">        <span class="keyword">return</span> parent[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (i == j) <span class="keyword">return</span>;</span><br><span class="line">    i = find(i);</span><br><span class="line">    j = find(j);</span><br><span class="line">    <span class="keyword">if</span> (i == j) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span> (rank[i] &lt; rank[j]) &#123;</span><br><span class="line">        swap(i, j);</span><br><span class="line">    &#125;</span><br><span class="line">    parent[j] = i;</span><br><span class="line">    <span class="keyword">if</span> (rank[i] == rank[j]) &#123;</span><br><span class="line">        rank[i]++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font color=#f00><strong>注意：使用前记得运行初始化函数。</strong></font></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;并查集&quot;&gt;&lt;a href=&quot;#并查集&quot; class=&quot;headerlink&quot; title=&quot;并查集&quot;&gt;&lt;/a&gt;并查集&lt;/h1&gt;&lt;p&gt;并查集的全称是合并-查找集合，顾名思义它的主要功能就是合并查找。&lt;/p&gt;
&lt;p&gt;&lt;font color=#09f&gt;合并：合并两个不相</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>KMP算法</title>
    <link href="http://example.com/2021/02/20/KMP%E7%AE%97%E6%B3%95/"/>
    <id>http://example.com/2021/02/20/KMP%E7%AE%97%E6%B3%95/</id>
    <published>2021-02-20T04:22:39.285Z</published>
    <updated>2021-02-20T05:08:14.201Z</updated>
    
    <content type="html"><![CDATA[<h1 id="KMP算法"><a href="#KMP算法" class="headerlink" title="KMP算法"></a>KMP算法</h1><p>KMP算法是用于解决字符串匹配的经典算法，就是判断一个字符串是否是另一个字符串的子串。</p><p>例如现在我们有两个字符串，字符串s: “aabaabaaf”和字符串t: “aabaaf”，我们该如何判断字符串t是否是字符串s的一个子串呢？如果使用暴力匹配，即两个for循环，暴力的时间复杂度是两个字符串长度的乘积。</p><p>而KMP算法有什么不同呢：</p><p>就比如字符串s和t的匹配中，当我们匹配到第六个字符时，发现b和f并不匹配，此时按照暴力法我们应该将s的下标+1，继续从t的开头开始匹配；但是如果是KMP算法，就会保持s的下标不变，将t的下标回退到2，即第三个字符’b’，这样是不是效率就提高了。</p><p>明白了KMP算法的优越性，我们想知道为什么它可以这样回退，回退的规则又是什么。其实，我们看字符串t，这里存在着相同的前后缀”aa”,正是因为有了相同的前后缀，我们就可以省去再次匹配相同字符的过程。那为什么t的下标回退到的位置2是怎么得来的呢？这就要用到字符串t的前缀表了。</p><h2 id="前缀表"><a href="#前缀表" class="headerlink" title="前缀表"></a>前缀表</h2><p>所谓前缀表，就是一个字符串中相同前后缀的长度所组成的表。</p><p>对于字符串t:</p><p>前缀包括：a,    aa,     aab,    aaba,     aabaa    （从前往后不包含尾字符）</p><p>后缀包括：f,     af,    aaf,    baaf,    abaaf        （从后向前不包含首字符）</p><p><font color=#08f>a ———-不存在相同前后缀，0</font></p><p><font color=#08f>aa ——–”a”,    1</font></p><p><font color=#08f>aab ——-不存在，0</font></p><p><font color=#08f>aaba ——“a”,    1</font></p><p><font color=#08f>aabaa —- “aa”,    2</font></p><p><font color=#08f>aabaaf —不存在，0</font></p><p>所以字符串t的前缀表为{0,1,0,1,2,0}</p><p>对于这个前缀表，当匹配到字符’f’时，退回的位置要看前缀表中它的前一位。</p><p>也可以将前缀表整体右移，变成{-1,0,1,0,1,2}，这样退回的位置就取决于字符本身对应的那一位了。</p><p>也可以将前缀表整体-1，这样退回的位置也是字符本身对应的那一位了。它们的本质都是利用字符串的前缀表找到回退的位置，只是实现起来有略微的不同，我们就以原本的前缀表为例进行演示。</p><h2 id="next数组"><a href="#next数组" class="headerlink" title="next数组"></a>next数组</h2><p>next数组其实就是前缀表在我们实际代码中的存在形式，这里我们要讲的是如何通过一个字符串找到它的前缀表，即next数组。找next数组并不难，只要记住四步操作：初始化，前后缀不相等，前后缀相等，赋值。</p><ul><li><p><strong>初始化</strong></p><p>首先要定义两个下标i , j，用来标识前后缀对应的字符；还要赋值next[0]=0；因为下标为0时无法再回退了。</p></li><li><p><strong>前后缀不相等</strong></p><p>前后缀不相等时，我们就需要回退，即j = next[j - 1]。同时还要保证j &gt; 0，j = 0时无法再回退。</p></li><li><p><strong>前后缀相等</strong></p><p>前后缀相等时，我们就继续匹配，j++。</p></li><li><p><strong>赋值</strong></p><p>给next数组赋值，此时相同前后缀的长度对应j的大小，即next[i] = j。</p></li></ul><p><strong>代码实现：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getNext</span><span class="params">(<span class="keyword">int</span> *next, <span class="built_in">string</span> t)</span></span>&#123;</span><br><span class="line">    <span class="comment">//初始化</span></span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">1</span>, j = <span class="number">0</span>;</span><br><span class="line">    next[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//前后缀不相等，注意回退是一直回退到可以匹配的位置，所以是while</span></span><br><span class="line">    <span class="keyword">for</span> (; i &lt; t.size(); i++) &#123;</span><br><span class="line">        <span class="keyword">while</span> (j &gt; <span class="number">0</span> &amp;&amp; s[i] != s[j]) &#123;</span><br><span class="line">        j = next[j - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (s[i] == s[j]) &#123; <span class="comment">//前后缀相等</span></span><br><span class="line">        j++;</span><br><span class="line">    &#125;</span><br><span class="line">    next[i] = j; <span class="comment">//赋值</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="例题实现："><a href="#例题实现：" class="headerlink" title="例题实现："></a>例题实现：</h2><p>函数实现的过程与寻找next数组大体一致：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isSonString</span><span class="params">(<span class="built_in">string</span> s, <span class="built_in">string</span> t)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> next[s.size()];</span><br><span class="line">    getNext(next, t);</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>; <span class="comment">//i = 0,从头开始匹配</span></span><br><span class="line">    <span class="keyword">for</span> (; i &lt; s.size(); i++) &#123;</span><br><span class="line">        <span class="keyword">while</span> (j &gt; <span class="number">0</span> &amp;&amp; s[i] != t[j]) &#123;</span><br><span class="line">            j = next[j - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (s[i] == t[j]) &#123;</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (j &gt;= t.size()) &#123; <span class="comment">//字符串t匹配完</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;KMP算法&quot;&gt;&lt;a href=&quot;#KMP算法&quot; class=&quot;headerlink&quot; title=&quot;KMP算法&quot;&gt;&lt;/a&gt;KMP算法&lt;/h1&gt;&lt;p&gt;KMP算法是用于解决字符串匹配的经典算法，就是判断一个字符串是否是另一个字符串的子串。&lt;/p&gt;
&lt;p&gt;例如现在我们有</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>快速幂</title>
    <link href="http://example.com/2021/02/05/%E5%BF%AB%E9%80%9F%E5%B9%82/"/>
    <id>http://example.com/2021/02/05/%E5%BF%AB%E9%80%9F%E5%B9%82/</id>
    <published>2021-02-05T07:51:35.998Z</published>
    <updated>2021-02-05T09:38:23.500Z</updated>
    
    <content type="html"><![CDATA[<h1 id="快速幂"><a href="#快速幂" class="headerlink" title="快速幂"></a>快速幂</h1><p>快速幂的主要作用是求a^b对mod取模，尤其适合于指数b和mod很大的情况，它的原理也十分简单，我们举一个简单的例子：2^10%100</p><p>如果用循环乘法来实现，一共要执行10次，然后再对100取余数；</p><p>而快速幂的思想则是减少执行的次数，把2^10变成（2*2）^5，这样做的好处是用一次底数的平方，减少了一半的执行量，指数b越大，减少的操作越多。</p><p>我们继续，4^5还能不能继续这样变换呢？当然可以，但是因为5是奇数，我们不能将它直接除以2，但是可以提出一个4^1，这样我们又可以对剩下的4^4进行操作了，一直继续下去：</p><p><strong>4^1*4^4=4^1*16^2=4^1*256^1</strong></p><p>对于取模的问题，我们都知道，(a*b)%mod=((a%mod)*(b%mod))%mod，因此在每次乘以底数a的时候都取一次模即可。</p><p>然后我们用流程图来表示一下整个过程：</p><div id="flowchart-0" class="flow-chart"></div><p>再将其转换为代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">quick_pow</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> a,<span class="keyword">long</span> <span class="keyword">long</span> b,<span class="keyword">long</span> <span class="keyword">long</span> mod)</span></span>&#123;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> ans=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(b&gt;<span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(b&amp;<span class="number">1</span>)&#123;<span class="comment">//b为奇数</span></span><br><span class="line">ans*=a%mod;</span><br><span class="line">&#125;</span><br><span class="line">b&gt;&gt;=<span class="number">1</span>;<span class="comment">//b除以2</span></span><br><span class="line">ans=(a*a)%mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中b&amp;1相当于b%2==1；b&gt;&gt;=1相当于b/=2。</p><p>这里是运用了位运算，在C/C++中相比于逻辑运算执行速度更快。<script src="https://cdnjs.cloudflare.com/ajax/libs/raphael/2.2.7/raphael.min.js"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/flowchart/1.6.5/flowchart.min.js"></script><textarea id="flowchart-0-code" style="display: none">start=>start: 开始operation0=>operation: 定义变量ans=1condition=>condition: b是奇数？operation1=>operation: b/=2operation2=>operation: ans=(a*a)%modreturn=>operation: 返回ansisOdd=>operation: ans*=a%modend=>end: 结束start->operation0->conditioncondition(yes)->isOdd->operation1condition(no)->operation1operation1->operation2->return->end</textarea><textarea id="flowchart-0-options" style="display: none">{"scale":1,"line-width":2,"line-length":50,"text-margin":10,"font-size":12}</textarea><script>  var code = document.getElementById("flowchart-0-code").value;  var options = JSON.parse(decodeURIComponent(document.getElementById("flowchart-0-options").value));  var diagram = flowchart.parse(code);  diagram.drawSVG("flowchart-0", options);</script></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;快速幂&quot;&gt;&lt;a href=&quot;#快速幂&quot; class=&quot;headerlink&quot; title=&quot;快速幂&quot;&gt;&lt;/a&gt;快速幂&lt;/h1&gt;&lt;p&gt;快速幂的主要作用是求a^b对mod取模，尤其适合于指数b和mod很大的情况，它的原理也十分简单，我们举一个简单的例子：2^10%10</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>01背包（动态规划解法）</title>
    <link href="http://example.com/2021/02/04/01%E8%83%8C%E5%8C%85%EF%BC%88%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E8%A7%A3%E6%B3%95%EF%BC%89/"/>
    <id>http://example.com/2021/02/04/01%E8%83%8C%E5%8C%85%EF%BC%88%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E8%A7%A3%E6%B3%95%EF%BC%89/</id>
    <published>2021-02-04T03:35:47.163Z</published>
    <updated>2021-02-04T06:41:05.272Z</updated>
    
    <content type="html"><![CDATA[<h1 id="01背包"><a href="#01背包" class="headerlink" title="01背包"></a>01背包</h1><p>01背包是一个很经典的问题，题目如下：有n件物品和一个最多能装重量为W 的背包。第i件物品的重量是weight[i]，得到的价值是value[i] 。每件物品只能用一次，问怎样装载能使背包里物品的价值最大。</p><p>这里我们用一组简单的数据来进行示例：假设背包最大容量为5</p><table><thead><tr><th>物品</th><th>重量</th><th>价值</th></tr></thead><tbody><tr><td>物品0</td><td>1</td><td>15</td></tr><tr><td>物品1</td><td>2</td><td>20</td></tr><tr><td>物品2</td><td>3</td><td>25</td></tr><tr><td>物品3</td><td>4</td><td>30</td></tr></tbody></table><hr><p>它与普通背包的区别在于，每个物品要么放，要么不放，而普通背包是可以放一部分的，因而普通背包可以通过贪心算法求解，01背包却不行。我们先来看看最不用动脑的暴力解法，即遍历每一种装载的可能，n个物品都有放与不放两种情况，因此暴力的时间复杂度为O(2^n)，指数级的时间复杂度不是很理想，如果在竞赛题里基本上是不可能AC的，于是我们再用动态规划来求解：</p><h2 id="1-确定dp数组含义"><a href="#1-确定dp数组含义" class="headerlink" title="1.确定dp数组含义"></a>1.确定dp数组含义</h2><p><font color=#09f>题目的主干是n件物品放进容量（可装重量）为W的背包的最大价值。所以定义一个二维数组dp，dp[i] [j]表示将前i件物品选择后放进容量为j的背包的最大价值，最终dp[n-1] [W]就是我们要求的最大价值（物品下标从0开始，所以n-1就已经是n件物品了）。</font></p><h2 id="2-找出状态转移方程"><a href="#2-找出状态转移方程" class="headerlink" title="2.找出状态转移方程"></a>2.找出状态转移方程</h2><p><font color=#09f>状态转移方程就是前后状态之间的关系，有了这个方程我们就可以在遍历数组时通过前面的值推出当前的元素值。</font></p><p><font color=#09f>对应到题目中，我们可以从两个方面来找，对于dp[i] [j]，我们可以选择把第i+1个物品不放入背包，那么它也就等同于只有i个物品，那么dp[i] [j]=dp[i-1] [j]；如果选择将第i+1个物品放入背包，那么就要先预留好第i+1个物品的位置，也就是先找到i个物品放入容量为当前背包容量减去第i+1个物品的重量的最大价值，然后加上第i+1个物品的价值，也就是dp[i] [j]=dp[i-1] [j-weight[i]]+value[i]。然后再在二者中取最大值即可。即：</font></p><p><font color=#09f><strong>dp[i] [j]=max(dp[i-1] [j],dp[i-1] [j-weight[i]]+value[i])</strong></font></p><h2 id="3-初始化"><a href="#3-初始化" class="headerlink" title="3.初始化"></a>3.初始化</h2><p><font color=#09f>初始化主要是当i和j为零的时候，因为后面的元素值都要根据它们推出。</font></p><p><font color=#09f>当i=0时，就是只有背包容量j大于等于第一件物品的重量weight[0]时，对应的元素值为value[0]；否则为0。</font></p><p><font color=#09f>当j=0时，即背包容量为0，那么什么也装不下，直接初始化为0。</font></p><table><thead><tr><th align="center">i \ j</th><th align="center">0</th><th align="center">1</th><th align="center">2</th><th align="center">3</th><th align="center">4</th><th align="center">5</th></tr></thead><tbody><tr><td align="center">物品0</td><td align="center">0</td><td align="center">15</td><td align="center">15</td><td align="center">15</td><td align="center">15</td><td align="center">15</td></tr><tr><td align="center">物品1</td><td align="center">0</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">物品2</td><td align="center">0</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">物品3</td><td align="center">0</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr></tbody></table><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> dp[MAXN][MAXN]=&#123;<span class="number">0</span>&#125;;<span class="comment">//数组大小根据情况设置</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=W;j++)&#123;<span class="comment">//i=0时，遍历所有的j给元素赋值</span></span><br><span class="line">    <span class="keyword">if</span>(j&gt;=weight[<span class="number">0</span>])</span><br><span class="line">        dp[<span class="number">0</span>][j]=value[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-遍历"><a href="#4-遍历" class="headerlink" title="4.遍历"></a>4.遍历</h2><p><font color=#09f>这一步就是遍历所有可能的i、j，通过第二步的状态转移方程更新dp数组的值，两个for循环即可实现：</font></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=W;j++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(j &lt; weight[i])</span><br><span class="line">            dp[i][j] = dp[i - <span class="number">1</span>][j];</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            dp[i][j]=max(dp[i<span class="number">-1</span>][j],dp[i<span class="number">-1</span>][j-weight[i]]+value[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">i \ j</th><th align="center">0</th><th align="center">1</th><th align="center">2</th><th align="center">3</th><th align="center">4</th><th align="center">5</th></tr></thead><tbody><tr><td align="center">物品0</td><td align="center">0</td><td align="center">15</td><td align="center">15</td><td align="center">15</td><td align="center">15</td><td align="center">15</td></tr><tr><td align="center">物品1</td><td align="center">0</td><td align="center">15</td><td align="center">20</td><td align="center">35</td><td align="center">35</td><td align="center">35</td></tr><tr><td align="center">物品2</td><td align="center">0</td><td align="center">15</td><td align="center">20</td><td align="center">35</td><td align="center">40</td><td align="center">45</td></tr><tr><td align="center">物品3</td><td align="center">0</td><td align="center">15</td><td align="center">20</td><td align="center">35</td><td align="center">40</td><td align="center">45</td></tr></tbody></table><p><font color=#09f>最后返回dp[n-1] [W]即可。我们可以看到，动态规划求解的时间复杂度是O(nW)，显然要优于暴力求解。</font></p><h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><p>在<a href="https://faccy.github.io/2021/01/22/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/">动态规划</a>中，我们提到了滚动数组这个概念，运用滚动数组将空间复杂度从O(n)优化到了O(1)，而这里也同样适用。我们通过状态转移方程可以发现，每一个元素值都是由上一行得来的，如果我们把上一行的内容拷贝到当前行，就可以把二维数组优化成一维数组。</p><p>那么新的数组dp[j]表示将全部n个元素选择放入容量为j的背包能得到的最大价值；新的状态转移方程为：</p><p>**dp [j]=max(dp [j],dp[j-weight[i]]+value[i])**。</p><p>然后进行遍历：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=W;j&gt;=weight[i];j--)&#123;</span><br><span class="line">        dp[j]=max(dp[j],dp[j-weight[i]]+value[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>你可能会发现，内层遍历变成了倒序，这是为什么捏？</p><p><font color=#f00><strong>因为当我们用一维数组来遍历，由状态转移方程可知，需要当前元素值和更前面的某一个元素（dp[j-weight[i]]+value[i]），如果先序遍历，那么更前面的那个元素的值可能已经发生了改变，对应到实际操作中就是有物品被重复计入了；而如果采用后序遍历，就能保证前面的值依然是上一层的，没有被更新。</strong></font></p><p>如果不明白可以将红字多看几遍，思考一下，或者代入数据实际操作一下就能发现问题所在。（有些数据可能得出的结果看不出问题，可以直接使用文章中的数据试验。）</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;01背包&quot;&gt;&lt;a href=&quot;#01背包&quot; class=&quot;headerlink&quot; title=&quot;01背包&quot;&gt;&lt;/a&gt;01背包&lt;/h1&gt;&lt;p&gt;01背包是一个很经典的问题，题目如下：有n件物品和一个最多能装重量为W 的背包。第i件物品的重量是weight[i]，得到的</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>二分法</title>
    <link href="http://example.com/2021/02/01/%E4%BA%8C%E5%88%86%E6%B3%95/"/>
    <id>http://example.com/2021/02/01/%E4%BA%8C%E5%88%86%E6%B3%95/</id>
    <published>2021-02-01T07:52:25.240Z</published>
    <updated>2021-02-01T09:25:28.067Z</updated>
    
    <content type="html"><![CDATA[<h1 id="二分法"><a href="#二分法" class="headerlink" title="二分法"></a>二分法</h1><p>二分法的思想很简单，确定好上下界，取中间的数，看是否符合条件，若是则将下界更新为中间数后的一位。即每次循环都将当前范围分成两份，然后抛弃不符合题意的一半，显然它的时间复杂度为O(log<font size=1> 2</font><font size=4>n</font>) 。它适用于较长的数组，并且数组元素必须是排好序的。</p><p>比如给出一个数组array[10]={1,2,3,4,5,6,7,8,9,10}；查找数组中是否含有8，是则输出“Yes”，否则输出“No”。</p><p>首先它是排好序的，符合条件，我们使用二分法：</p><p><font color=#09f>定义上下界分别为10和1，中间数为(1+10)/2=5，5&lt;8，所以保留后半部分，下界更新为5+1=6；中间数为(6+10)/2=8，找到了，循环结束。</font></p><p>C++代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">array</span>[<span class="number">10</span>]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> low=<span class="built_in">array</span>[<span class="number">0</span>],high=<span class="built_in">array</span>[<span class="number">9</span>],mid;</span><br><span class="line">    <span class="keyword">while</span>(low&lt;=high)&#123;</span><br><span class="line">        mid=(low+high)/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(mid&gt;<span class="number">8</span>)&#123;</span><br><span class="line">            high=mid<span class="number">-1</span>;<span class="comment">//更新上界</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(mid&lt;<span class="number">8</span>)&#123;</span><br><span class="line">            low=mid+<span class="number">1</span>;<span class="comment">//更新下界</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;<span class="comment">//找到了</span></span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;Yes&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//没找到</span></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;No&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最主要的就是选择上下界，然后实现循环。</p><h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><p>在代号为 C-137 的地球上，Rick 发现如果他将两个球放在他新发明的篮子里，它们之间会形成特殊形式的磁力。Rick 有 n 个空的篮子，第 i 个篮子的位置在 position[i] ，Morty 想把 m 个球放到这些篮子里，使得任意两球间 最小磁力 最大。</p><p>已知两个球如果分别位于 x 和 y ，那么它们之间的磁力为 |x - y| 。</p><p>给你一个整数数组 position 和一个整数 m ，请你返回最大化的最小磁力。</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/magnetic-force-between-two-balls">https://leetcode-cn.com/problems/magnetic-force-between-two-balls</a></p><hr><p><font size=4><font color=#ff0>解析：</font></font>这题如果使用二分法求解，首先就是要找到上下界，对应到题目中就是m个球之间可能的最小距离。 最小距离的最大值，就是在篮子全部相邻的情况下，此时最小距离为n/(m-1),最小距离的最小值我们设为1。那么我们只需要二分这个区间，查找到数组position能够满足的最大的最小距离即可。定义一个check函数用于判断数组position能否实现这个最小距离。</p><p>C++代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v,<span class="keyword">int</span> m,<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> former,latter,count=<span class="number">0</span>,i=<span class="number">0</span>,j=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(j&lt;=v.size()<span class="number">-1</span>)&#123;</span><br><span class="line">        former=v[i];</span><br><span class="line">        latter=v[j];</span><br><span class="line">        <span class="keyword">if</span>(latter-former&gt;=n)&#123;</span><br><span class="line">            count++;</span><br><span class="line">            i=j;</span><br><span class="line">        &#125;</span><br><span class="line">        j++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(count&gt;=m<span class="number">-1</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">maxDistance</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; position, <span class="keyword">int</span> m)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> len=position.size(),mayAns;</span><br><span class="line">    sort(position.begin(),position.end());</span><br><span class="line">    <span class="keyword">int</span> high=(position[len<span class="number">-1</span>]-position[<span class="number">0</span>])/(m<span class="number">-1</span>),low=<span class="number">1</span>,mid;</span><br><span class="line">    <span class="keyword">while</span>(low&lt;=high)&#123;</span><br><span class="line">        mid=(high+low)/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(check(position,m,mid))&#123;</span><br><span class="line">            low=mid+<span class="number">1</span>;</span><br><span class="line">            mayAns=mid;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            high=mid<span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> mayAns;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;二分法&quot;&gt;&lt;a href=&quot;#二分法&quot; class=&quot;headerlink&quot; title=&quot;二分法&quot;&gt;&lt;/a&gt;二分法&lt;/h1&gt;&lt;p&gt;二分法的思想很简单，确定好上下界，取中间的数，看是否符合条件，若是则将下界更新为中间数后的一位。即每次循环都将当前范围分成两份，然后</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Markdown语法</title>
    <link href="http://example.com/2021/01/31/Markdown%E8%AF%AD%E6%B3%95/"/>
    <id>http://example.com/2021/01/31/Markdown%E8%AF%AD%E6%B3%95/</id>
    <published>2021-01-31T04:05:51.982Z</published>
    <updated>2021-02-20T04:53:07.680Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Markdown语法"><a href="#Markdown语法" class="headerlink" title="Markdown语法"></a>Markdown语法</h1><h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 一级标题</span><br><span class="line">## 二级标题</span><br><span class="line">### 三级标题</span><br></pre></td></tr></table></figure><p>以此类推（记得“#”后面有空格）</p><p>效果：</p><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h2 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;font size&#x3D;4&gt;内容&lt;&#x2F;font&gt;          大小</span><br><span class="line">&lt;font color&#x3D;#0ff&gt;内容&lt;&#x2F;font&gt;      颜色</span><br><span class="line">&lt;font face&#x3D;&quot;隶书&quot;&gt;内容&lt;&#x2F;font&gt;  字体</span><br></pre></td></tr></table></figure><p>效果：</p><p><font size=4>内容</font><br><font color=#0ff>内容</font></p><p><font face="隶书">内容</font></p><p><strong>加粗</strong>    左右加“**”</p><p><em>斜体</em>    左右加“*”</p><p><strong><em>斜体加粗</em></strong>    左右加“***”</p><p><del>删除线</del>    左右加“~~”</p><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><p>在引用的文字前加“&gt;”，可以嵌套</p><p>效果：</p><blockquote><p>这是引用</p><blockquote><p>这是引用的引用</p><p>再往下</p><blockquote><p>无限嵌套</p><blockquote><p>你搁着套娃呢</p><p>没了没了</p></blockquote></blockquote></blockquote></blockquote><h2 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h2><p>三个及以上的 “-“ 或者 ”*“ </p><p>效果：</p><hr><hr><hr><hr><hr><hr><hr><h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">![图片alt](图片地址 &quot;图片title&quot;)</span><br><span class="line"></span><br><span class="line">图片alt就是显示在图片下面的文字，相当于图片名。</span><br><span class="line">图片title就是将鼠标移动到图片上时显示的文字信息，可不加。</span><br></pre></td></tr></table></figure><p>效果：<img src="https://pic.rmb.bdstatic.com/bjh/e601f64fa52542dd50c350596de08534.jpeg" alt="菠萝屋壁纸" title="你好！我是海绵宝宝！"></p><h2 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[超链接名](超链接地址 &quot;超链接title&quot;)</span><br><span class="line"></span><br><span class="line">超链接名和超链接title的含义与图片中的类似。</span><br></pre></td></tr></table></figure><p>效果：</p><p><a href="https://www.baidu.com/" title="这是百度的超链接">百度</a></p><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><h4 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">+ 列表内容</span><br><span class="line">- 列表内容</span><br><span class="line">* 列表内容</span><br><span class="line"></span><br><span class="line">三种均可以，注意符号与内容中间有空格。</span><br></pre></td></tr></table></figure><p>效果：</p><ul><li>列表1</li><li>列表2</li><li>列表3</li></ul><h4 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1. 列表内容</span><br><span class="line">2. 列表内容</span><br><span class="line">3. 列表内容</span><br><span class="line"></span><br><span class="line">注意空格。</span><br></pre></td></tr></table></figure><p>效果（可嵌套）：</p><ol><li>列表内容</li><li>列表内容</li><li>列表内容<ul><li>列表内容</li><li>列表内容</li></ul></li><li>列表内容<ol><li>列表内容</li><li>列表内容</li></ol></li></ol><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">姓名|技能|排行</span><br><span class="line">-|:-:|-:</span><br><span class="line">刘备|哭|大哥</span><br><span class="line">关羽|打|二哥</span><br><span class="line">张飞|骂|三弟</span><br><span class="line"></span><br><span class="line">第二行分割表头和内容。</span><br><span class="line">文字默认居左</span><br><span class="line">-两边加:文字居中</span><br><span class="line">-右边加:文字居右。</span><br><span class="line"></span><br><span class="line">原生语法两边都要用|，此处进行了省略。</span><br></pre></td></tr></table></figure><p>效果：</p><table><thead><tr><th>姓名</th><th align="center">技能</th><th align="right">排行</th></tr></thead><tbody><tr><td>刘备</td><td align="center">哭</td><td align="right">大哥</td></tr><tr><td>关羽</td><td align="center">打</td><td align="right">二哥</td></tr><tr><td>张飞</td><td align="center">骂</td><td align="right">三弟</td></tr></tbody></table><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">单行代码：&#39;代码内容&#39;</span><br><span class="line">代码块：</span><br><span class="line">​&#96;&#96;&#96;</span><br><span class="line">代码</span><br><span class="line">代码</span><br><span class="line">代码</span><br><span class="line">​&#96;&#96;&#96;</span><br></pre></td></tr></table></figure><p>效果：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;hello world!&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h2><p>以标准流程图为例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">st&#x3D;&gt;start: 开始框</span><br><span class="line">op&#x3D;&gt;operation: 处理框</span><br><span class="line">cond&#x3D;&gt;condition: 判断框(是或否?)</span><br><span class="line">sub1&#x3D;&gt;subroutine: 子流程</span><br><span class="line">io&#x3D;&gt;inputoutput: 输入输出框</span><br><span class="line">e&#x3D;&gt;end: 结束框</span><br><span class="line">st-&gt;op-&gt;cond</span><br><span class="line">cond(yes)-&gt;io-&gt;e</span><br><span class="line">cond(no)-&gt;sub1(right)-&gt;op</span><br></pre></td></tr></table></figure><p>效果：</p><div id="flowchart-0" class="flow-chart"></div><p>更多其他类型流程图参考<a href="https://jingyan.baidu.com/article/48b558e3035d9a7f38c09aeb.html">百度经验</a></p><p>flow流程图语法详见简书博客<a href="https://www.jianshu.com/p/f28c94cf1204">MarkDown flow流程图示例</a></p><p>本文参考简书博客<a href="https://www.jianshu.com/p/191d1e21f7ed">Markdown基本语法</a><script src="https://cdnjs.cloudflare.com/ajax/libs/raphael/2.2.7/raphael.min.js"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/flowchart/1.6.5/flowchart.min.js"></script><textarea id="flowchart-0-code" style="display: none">st=>start: 开始框op=>operation: 处理框cond=>condition: 判断框(是或否?)sub1=>subroutine: 子流程io=>inputoutput: 输入输出框e=>end: 结束框st->op->condcond(yes)->io->econd(no)->sub1(right)->op</textarea><textarea id="flowchart-0-options" style="display: none">{"scale":1,"line-width":2,"line-length":50,"text-margin":10,"font-size":12}</textarea><script>  var code = document.getElementById("flowchart-0-code").value;  var options = JSON.parse(decodeURIComponent(document.getElementById("flowchart-0-options").value));  var diagram = flowchart.parse(code);  diagram.drawSVG("flowchart-0", options);</script></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Markdown语法&quot;&gt;&lt;a href=&quot;#Markdown语法&quot; class=&quot;headerlink&quot; title=&quot;Markdown语法&quot;&gt;&lt;/a&gt;Markdown语法&lt;/h1&gt;&lt;h2 id=&quot;标题&quot;&gt;&lt;a href=&quot;#标题&quot; class=&quot;headerli</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>回溯法</title>
    <link href="http://example.com/2021/01/22/%E5%9B%9E%E6%BA%AF%E6%B3%95/"/>
    <id>http://example.com/2021/01/22/%E5%9B%9E%E6%BA%AF%E6%B3%95/</id>
    <published>2021-01-22T02:04:58.351Z</published>
    <updated>2021-02-04T08:50:29.886Z</updated>
    
    <content type="html"><![CDATA[<h2 id="回溯法"><a href="#回溯法" class="headerlink" title="回溯法"></a>回溯法</h2><hr><p>回溯法，简单的来说，就是搜索所有可能的解得过程中，如果搜索到某一结点不满足条件了，就回溯至上一个结点，改变上一个结点的值（或选择），然后继续搜索，不断重复此过程直至求出所有符合题意的解。</p><p>回溯法解决的问题都包含着选择，因此其解空间常用树来表示，搜索解空间树的过程，其实就是遍历这棵解空间树的过程。我们都知道，遍历树有递归和非递归两种方式，对应的回溯法的框架也是两种。</p><h2 id="递归框架"><a href="#递归框架" class="headerlink" title="递归框架"></a>递归框架</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> x[n];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">backtrack</span><span class="params">(<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(i&gt;n)</span><br><span class="line">        输出结果</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(j=下界;j&lt;=上界;j++)&#123;</span><br><span class="line">            x[i]=j;</span><br><span class="line">            ...</span><br><span class="line">                <span class="keyword">if</span>(constraint(i)&amp;&amp;bound(i))</span><br><span class="line">                    backtrack(i+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们看一个具体的例子尝试来理解这个框架。</p><p>现在有一个含n个整数的数组a，无相同元素，设计算法求其所有子集。例如a[]={1,2,3}</p><p>分析：很显然此题可以使用暴力法求解，此题的回溯法其实跟暴力法很类似。我们就用a[]={1,2,3}来分析，求子集的过程其实可以理解为三次选择，第一次是否选择1，第二次是否选择2，以此类推。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> a[],<span class="keyword">int</span> n,<span class="keyword">int</span> i,<span class="keyword">int</span> x[])</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(i&gt;n)</span><br><span class="line">        Disp(a,n,x);</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        x[i]=<span class="number">0</span>;</span><br><span class="line">        dfs(a,n,i+<span class="number">1</span>,x);</span><br><span class="line">        x[i]=<span class="number">1</span>;</span><br><span class="line">        dfs(a,n,i+<span class="number">1</span>,x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中数组x是用来记录对应的数组a元素是否被选中的。注意看else中的内容，x[i]=0表示对应的a[i]不被选中，然后搜索下一层，当下一层搜索完成，回溯到本层，又选中a[i]，继续下一层的搜索。</p><p>回到上面的递归框架，会发现里面有两个函数我们还没有用到，constraint和bound，它们分别为约束条件和限界函数。约束函数用于选取满足条件的一个解，限界函数用于剪去不可能存在解得结点。这两个函数统称剪枝函数，顾名思义就是剪去解空间树上不符合题目要求的结点及其子结点。例题中没有回溯的原因正是题目没有对解进行约束限制，而在实际应用中，这种限制是经常存在的，如果现在我们要求找出最多包含两个元素的子集，又该如何处理呢？</p><p>分析：新加入的限制就是一个限界函数，它要求我们保证子集的元素个数在两个及以下，反馈到代码中就是要求最后数组x的和要小于等于2，于是乎我们给递归过程加上一个if语句进行限制。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">bound</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> x[])</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        sum+=x[i+<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">if</span>(sum&lt;=<span class="number">2</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> a[],<span class="keyword">int</span> n,<span class="keyword">int</span> i,<span class="keyword">int</span> x[])</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(i&gt;n)</span><br><span class="line">        Disp(a,n,x);</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        x[i]=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(bound(i,x))</span><br><span class="line">            dfs(a,n,i+<span class="number">1</span>,x);</span><br><span class="line">        x[i]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(bound(i,x))</span><br><span class="line">            dfs(a,n,i+<span class="number">1</span>,x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到代码中添加了一个bound函数，用来判断子集中的元素是否已经大于两个，这样就剪去了元素个数大于2的子集的结点，即上文提到的“剪枝”。</p><h2 id="非递归框架"><a href="#非递归框架" class="headerlink" title="非递归框架"></a>非递归框架</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> x[n];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">backtrack</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(i&gt;=<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(ExistSonNode(t))&#123;</span><br><span class="line">            <span class="keyword">for</span>(j=下界;j&lt;=上界;j++)&#123;</span><br><span class="line">                x[i]取一个可能的值</span><br><span class="line">                <span class="keyword">if</span>(constraint(i)&amp;&amp;bound(i))&#123;</span><br><span class="line">                    <span class="keyword">if</span>(x是一个可行解)</span><br><span class="line">                        输出x</span><br><span class="line">                    <span class="keyword">else</span> i++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> i--</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 我们不难看出，非递归框架是通过下标的变化来实现搜索的回溯的，例题的非递归实现如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">backtrack</span><span class="params">(<span class="keyword">int</span> a[],<span class="keyword">int</span> n,<span class="keyword">int</span> x[])</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i1=<span class="number">0</span>;i1&lt;<span class="number">2</span>;i1++)&#123;</span><br><span class="line">        x[i]=i1;i++;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i2=<span class="number">0</span>;i2&lt;<span class="number">2</span>;i2++)&#123;</span><br><span class="line">            x[i]=i2;i++;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i3=<span class="number">0</span>;i3&lt;<span class="number">2</span>;i3++)&#123;</span><br><span class="line">                x[i]=i3;</span><br><span class="line">                <span class="keyword">if</span>(bound(n,x))</span><br><span class="line">                    Disp(a,n,x);</span><br><span class="line">            &#125;</span><br><span class="line">            i--;</span><br><span class="line">        &#125;</span><br><span class="line">        i--;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><p>著名的n皇后问题就非常适合用回溯法的思想来求解。</p><p>在n*n的方格棋盘上放置n个皇后，要求每个皇后不同行、不同列、不同左右对角线。</p><p>分析：可以定义一个数组，用来存放皇后的位置，下标代表行数，值代表列数，如q[2]=3就表示第二行第三列放置了一个皇后。那么这个数组就是我们的解空间，第一行任取一个不大于n的值，第二行任取不与第一个冲突的值…</p><p>实现代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 20</span></span><br><span class="line"><span class="keyword">int</span> q[MAX];</span><br><span class="line"><span class="keyword">int</span> n=<span class="number">4</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Disp</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;(&quot;</span>&lt;&lt;i&lt;&lt;<span class="string">&quot;,&quot;</span>&lt;&lt;q[i]&lt;&lt;<span class="string">&quot;)&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">bound</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> j)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(i==<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>;k&lt;i;k++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(q[k]==j)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">abs</span>(k-j)==<span class="built_in">abs</span>(q[k]-q[i]))</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">queens</span><span class="params">(<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(i&gt;n)</span><br><span class="line">        Disp();</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=<span class="number">4</span>;j++)&#123;</span><br><span class="line">            q[i]=j;</span><br><span class="line">            <span class="keyword">if</span>(bound(i,j))</span><br><span class="line">                queens(i+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    queens(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;回溯法&quot;&gt;&lt;a href=&quot;#回溯法&quot; class=&quot;headerlink&quot; title=&quot;回溯法&quot;&gt;&lt;/a&gt;回溯法&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;回溯法，简单的来说，就是搜索所有可能的解得过程中，如果搜索到某一结点不满足条件了，就回溯至上一个结点，改变上一个结点的值（</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>动态规划</title>
    <link href="http://example.com/2021/01/22/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    <id>http://example.com/2021/01/22/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</id>
    <published>2021-01-22T02:04:58.341Z</published>
    <updated>2021-02-04T06:47:45.345Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是动态规划"><a href="#什么是动态规划" class="headerlink" title="什么是动态规划"></a>什么是动态规划</h2><p>我们首先看一下递归求斐波那契数列的函数：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fib</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">1</span>||n==<span class="number">2</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> fib(n<span class="number">-1</span>)+fib(n<span class="number">-2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>假设我们输入的参数是5，那么求解过程为：</p><p><img src="//tvax2.sinaimg.cn/large/007dBPqAgy1gk5wxvw6fsj30cb0a1q2y.jpg"></p><p>会发现其中有重复的计算，如fib(3)就算了两次，如果我们将规模扩大，那么重复的计算会更多。</p><p>为了避免重复计算，我们可以创建一个全局数组，存储fib(n)的值，当需要fib(n)时，可直接参与运算，而不需要再次递归。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Max 20</span></span><br><span class="line"><span class="keyword">int</span> dp[Max]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fib</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    dp[<span class="number">1</span>]=dp[<span class="number">2</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">3</span>;i&lt;=n;i++)</span><br><span class="line">        dp[i]=dp[i<span class="number">-1</span>]+dp[i<span class="number">-2</span>];</span><br><span class="line">    <span class="keyword">return</span> dp[n];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样就使时间复杂度从指数级降为了O(n),大大提高了算法效率。<br>这就是经典的动态规划算法的应用。</p><h2 id="动态规划的适用问题"><a href="#动态规划的适用问题" class="headerlink" title="动态规划的适用问题"></a>动态规划的适用问题</h2><p>动态规划的核心思想就是把多阶段的过程转化为很多单阶段过程，利用各阶段之间的关系求解。</p><p>动态规划算法的使用要包含3个条件：</p><p>（1）<strong>最优性原理</strong>：指问题的最优解所包含的子问题的解也是最优的，这样便可通过最优子问题的解最终求出问题的最优解。</p><p>（2）<strong>无后效性</strong>：一个确定了的状态不受后面状态的影响，比如一旦求出fib(3)=2,它就一直等于2，与之后的计算无关。</p><p>（3）<strong>有重叠子问题</strong>：即子问题之间有联系，比如斐波那契数列中新的一项等于前两项之和。</p><h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><p>求将正整数n无序拆分成最大数为k的拆分方案个数，要求所有的拆分方案不重复。</p><p>分析：首先我们看能否将这个问题转化为多个单阶段过程，题目要求最大值为k，那么我们可以将拆分分为两种：一种包含k；另一种不包含k。对于包含k的方案，可以理解为一个k和后面剩余的数，而后面的数中还有可能再次出现k,就相当于在把后面和为n-k的数进行拆分，最大值为k；假设存在一个函数f(n,k)能表示题目要求的拆分次数，那么包含k的方案就有f(n-k,k)种。同样，对于不包含k的方案，既然不包含他的最大值，我们就可以直接将其最大值改为k-1，即f(n,k-1);这样，我们就找到了当前状态与前面状态的关系：f(n,k)=f(n-k,k)+f(n,k-1),很显然它满足我们上面所说的3个条件，那么就可以使用动态规划求解。</p><p>确定了可以使用动态规划之后，最重要的一步就是找到状态方程，也就是前后子问题之间的关系。在上面推出的f(n,k)=f(n-k)+f(n,k-1)只是我们默认n&gt;k且n,k均不唯一的情况。完整考虑得出的状态方程如下：</p><p>f(n,k)=</p><p>1            n=1 or k=1<br>f(n,n)              n&lt;k<br>f(n,n-1)+1          n=k<br>f(n-k,k)+f(n,k-1)   n&gt;k</p><p>代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Max 20</span></span><br><span class="line"><span class="keyword">int</span> dp[Max][Max]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=k;j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(i==<span class="number">1</span>||j==<span class="number">1</span>)</span><br><span class="line">dp[i][j]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(i&lt;j)</span><br><span class="line">dp[i][j]=dp[i][i];</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(i==j)</span><br><span class="line">dp[i][j]=dp[i][i<span class="number">-1</span>]+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">dp[i][j]=dp[i-j][j]+dp[i][j<span class="number">-1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> dp[n][k];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此题也可以使用递归解决，读者可自行尝试，比较体会动态规划算法的优越性。</p><h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><p>动态规划在一些情况下可以进行空间上的优化。比如最初的求斐波那契数列的问题，我们可以发现，实际参与计算就是三个量：fib(n),fib(n-1)和fib(n-2)，但是我们却使用了长度至少为n的数组。实际上我们只需要定义一个长度为3的数组，通过数组的循环滚动使用来完成计算，我们称其为<strong>滚动数组</strong>。</p><p>代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> dp[<span class="number">3</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fib</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">dp[<span class="number">1</span>]=dp[<span class="number">2</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">3</span>;i&lt;=n;i++)</span><br><span class="line">dp[i%<span class="number">3</span>]=dp[(i<span class="number">-1</span>)%<span class="number">3</span>]+dp[(i<span class="number">-2</span>)%<span class="number">3</span>];</span><br><span class="line"><span class="keyword">return</span> dp[n%<span class="number">3</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样，算法的空间复杂度就由O(n)变成了O(1)。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;什么是动态规划&quot;&gt;&lt;a href=&quot;#什么是动态规划&quot; class=&quot;headerlink&quot; title=&quot;什么是动态规划&quot;&gt;&lt;/a&gt;什么是动态规划&lt;/h2&gt;&lt;p&gt;我们首先看一下递归求斐波那契数列的函数：&lt;/p&gt;
&lt;figure class=&quot;highlight </summary>
      
    
    
    
    
  </entry>
  
</feed>
