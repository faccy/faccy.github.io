<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-01-31T04:12:17.563Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Faccy</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Markdown语法</title>
    <link href="http://example.com/2021/01/31/Markdown%E8%AF%AD%E6%B3%95/"/>
    <id>http://example.com/2021/01/31/Markdown%E8%AF%AD%E6%B3%95/</id>
    <published>2021-01-31T04:05:51.982Z</published>
    <updated>2021-01-31T04:12:17.563Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Markdown语法"><a href="#Markdown语法" class="headerlink" title="Markdown语法"></a>Markdown语法</h1><h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 一级标题</span><br><span class="line">## 二级标题</span><br><span class="line">### 三级标题</span><br></pre></td></tr></table></figure><p>以此类推（记得“#”后面有空格）</p><p>效果：</p><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h2 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h2><p><strong>加粗</strong>    左右加“**”</p><p><em>斜体</em>    左右加“*”</p><p><strong><em>斜体加粗</em></strong>    左右加“***”</p><p><del>删除线</del>    左右加“~~”</p><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><p>在引用的文字前加“&gt;”，可以嵌套</p><p>效果：</p><blockquote><p>这是引用</p><blockquote><p>这是引用的引用</p><p>再往下</p><blockquote><p>无限嵌套</p><blockquote><p>你搁着套娃呢</p><p>没了没了</p></blockquote></blockquote></blockquote></blockquote><h2 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h2><p>三个及以上的 “-“ 或者 ”*“ </p><p>效果：</p><hr><hr><hr><hr><hr><hr><hr><h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">![图片alt](图片地址 &quot;图片title&quot;)</span><br><span class="line"></span><br><span class="line">图片alt就是显示在图片下面的文字，相当于图片名。</span><br><span class="line">图片title就是将鼠标移动到图片上时显示的文字信息，可不加。</span><br></pre></td></tr></table></figure><p>效果：<img src="https://ae03.alicdn.com/kf/Hc97fc17e97604b7ea45d2a572e906e7fA.png" alt="菠萝屋壁纸" title="你好！我是海绵宝宝！"></p><h2 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[超链接名](超链接地址 &quot;超链接title&quot;)</span><br><span class="line"></span><br><span class="line">超链接名和超链接title的含义与图片中的类似。</span><br></pre></td></tr></table></figure><p>效果：</p><p><a href="https://www.baidu.com/" title="这是百度的超链接">百度</a></p><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><h4 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">+ 列表内容</span><br><span class="line">- 列表内容</span><br><span class="line">* 列表内容</span><br><span class="line"></span><br><span class="line">三种均可以，注意符号与内容中间有空格。</span><br></pre></td></tr></table></figure><p>效果：</p><ul><li>列表1</li><li>列表2</li><li>列表3</li></ul><h4 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1. 列表内容</span><br><span class="line">2. 列表内容</span><br><span class="line">3. 列表内容</span><br><span class="line"></span><br><span class="line">注意空格。</span><br></pre></td></tr></table></figure><p>效果（可嵌套）：</p><ol><li>列表内容</li><li>列表内容</li><li>列表内容<ul><li>列表内容</li><li>列表内容</li></ul></li><li>列表内容<ol><li>列表内容</li><li>列表内容</li></ol></li></ol><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">姓名|技能|排行</span><br><span class="line">-|:-:|-:</span><br><span class="line">刘备|哭|大哥</span><br><span class="line">关羽|打|二哥</span><br><span class="line">张飞|骂|三弟</span><br><span class="line"></span><br><span class="line">第二行分割表头和内容。</span><br><span class="line">文字默认居左</span><br><span class="line">-两边加:文字居中</span><br><span class="line">-右边加:文字居右。</span><br><span class="line"></span><br><span class="line">原生语法两边都要用|，此处进行了省略。</span><br></pre></td></tr></table></figure><p>效果：</p><table><thead><tr><th>姓名</th><th align="center">技能</th><th align="right">排行</th></tr></thead><tbody><tr><td>刘备</td><td align="center">哭</td><td align="right">大哥</td></tr><tr><td>关羽</td><td align="center">打</td><td align="right">二哥</td></tr><tr><td>张飞</td><td align="center">骂</td><td align="right">三弟</td></tr></tbody></table><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">单行代码：&#39;代码内容&#39;</span><br><span class="line">代码块：</span><br><span class="line">​&#96;&#96;&#96;</span><br><span class="line">代码</span><br><span class="line">代码</span><br><span class="line">代码</span><br><span class="line">​&#96;&#96;&#96;</span><br></pre></td></tr></table></figure><p>效果：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;hello world!&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h2><p>以标准流程图为例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">​&#96;&#96;&#96;flow</span><br><span class="line">st&#x3D;&gt;start: 开始框</span><br><span class="line">op&#x3D;&gt;operation: 处理框</span><br><span class="line">cond&#x3D;&gt;condition: 判断框(是或否?)</span><br><span class="line">sub1&#x3D;&gt;subroutine: 子流程</span><br><span class="line">io&#x3D;&gt;inputoutput: 输入输出框</span><br><span class="line">e&#x3D;&gt;end: 结束框</span><br><span class="line">st-&gt;op-&gt;cond</span><br><span class="line">cond(yes)-&gt;io-&gt;e</span><br><span class="line">cond(no)-&gt;sub1(right)-&gt;op</span><br><span class="line">​&#96;&#96;&#96;</span><br></pre></td></tr></table></figure><p>效果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">st&#x3D;&gt;start: 开始框</span><br><span class="line">op&#x3D;&gt;operation: 处理框</span><br><span class="line">cond&#x3D;&gt;condition: 判断框(是或否?)</span><br><span class="line">sub1&#x3D;&gt;subroutine: 子流程</span><br><span class="line">io&#x3D;&gt;inputoutput: 输入输出框</span><br><span class="line">e&#x3D;&gt;end: 结束框</span><br><span class="line">st-&gt;op-&gt;cond</span><br><span class="line">cond(yes)-&gt;io-&gt;e</span><br><span class="line">cond(no)-&gt;sub1(right)-&gt;op</span><br></pre></td></tr></table></figure><p>更多流程图参考<a href="https://jingyan.baidu.com/article/48b558e3035d9a7f38c09aeb.html">百度经验</a></p><p>本文参考简书博客<a href="https://www.jianshu.com/p/191d1e21f7ed">Markdown基本语法</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Markdown语法&quot;&gt;&lt;a href=&quot;#Markdown语法&quot; class=&quot;headerlink&quot; title=&quot;Markdown语法&quot;&gt;&lt;/a&gt;Markdown语法&lt;/h1&gt;&lt;h2 id=&quot;标题&quot;&gt;&lt;a href=&quot;#标题&quot; class=&quot;headerli</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>回溯法</title>
    <link href="http://example.com/2021/01/22/%E5%9B%9E%E6%BA%AF%E6%B3%95/"/>
    <id>http://example.com/2021/01/22/%E5%9B%9E%E6%BA%AF%E6%B3%95/</id>
    <published>2021-01-22T02:04:58.351Z</published>
    <updated>2021-01-31T04:08:32.999Z</updated>
    
    <content type="html"><![CDATA[<h2 id="回溯法"><a href="#回溯法" class="headerlink" title="回溯法"></a>回溯法</h2><hr><p>回溯法，简单的来说，就是搜索所有可能的解得过程中，如果搜索到某一结点不满足条件了，就回溯至上一个结点，改变上一个结点的值（或选择），然后继续搜索，不断重复此过程直至求出所有符合题意的解。</p><p>回溯法解决的问题都包含着选择，因此其解空间常用树来表示，搜索解空间树的过程，其实就是遍历这棵解空间树的过程。我们都知道，遍历树有递归和非递归两种方式，对应的回溯法的框架也是两种。</p><h2 id="递归框架"><a href="#递归框架" class="headerlink" title="递归框架"></a>递归框架</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> x[n];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">backtrack</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(i&gt;n)</span><br><span class="line">输出结果</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">for</span> (j = 下界; j &lt;= 上界; j++) &#123;</span><br><span class="line">x[i] = j;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">if</span> (constraint(i) &amp;&amp; bound(i))</span><br><span class="line">backtrack(i + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们看一个具体的例子尝试来理解这个框架。</p><p>现在有一个含n个整数的数组a，无相同元素，设计算法求其所有子集。例如a[]={1,2,3}</p><p>分析：很显然此题可以使用暴力法求解，此题的回溯法其实跟暴力法很类似。我们就用a[]={1,2,3}来分析，求子集的过程其实可以理解为三次选择，第一次是否选择1，第二次是否选择2，以此类推。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> n, <span class="keyword">int</span> i, <span class="keyword">int</span> x[])</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (i &gt; n)</span><br><span class="line">Disp(a,n,x);</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">x[i] = <span class="number">0</span>;</span><br><span class="line">dfs(a, n, i + <span class="number">1</span>, x);</span><br><span class="line">x[i] = <span class="number">1</span>;</span><br><span class="line">dfs(a, n, i + <span class="number">1</span>, x);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中数组x是用来记录对应的数组a元素是否被选中的。注意看else中的内容，x[i]=0表示对应的a[i]不被选中，然后搜索下一层，当下一层搜索完成，回溯到本层，又选中a[i]，继续下一层的搜索。</p><p>回到上面的递归框架，会发现里面有两个函数我们还没有用到，constraint和bound，它们分别为约束条件和限界函数。约束函数用于选取满足条件的一个解，限界函数用于剪去不可能存在解得结点。这两个函数统称剪枝函数，顾名思义就是剪去解空间树上不符合题目要求的结点及其子结点。例题中没有回溯的原因正是题目没有对解进行约束限制，而在实际应用中，这种限制是经常存在的，如果现在我们要求找出最多包含两个元素的子集，又该如何处理呢？</p><p>分析：新加入的限制就是一个限界函数，它要求我们保证子集的元素个数在两个及以下，反馈到代码中就是要求最后数组x的和要小于等于2，于是乎我们给递归过程加上一个if语句进行限制。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">bound</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> x[])</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">sum += x[i + <span class="number">1</span>];</span><br><span class="line"><span class="keyword">if</span> (sum &lt;= <span class="number">2</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> n, <span class="keyword">int</span> i, <span class="keyword">int</span> x[])</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (i &gt; n)</span><br><span class="line">Disp(a,n,x);</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">x[i] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(bound(i,x))</span><br><span class="line">dfs(a, n, i + <span class="number">1</span>, x);</span><br><span class="line">x[i] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (bound(i,x))</span><br><span class="line">dfs(a, n, i + <span class="number">1</span>, x);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到代码中添加了一个bound函数，用来判断子集中的元素是否已经大于两个，这样就剪去了元素个数大于2的子集的结点，即上文提到的“剪枝”。</p><h2 id="非递归框架"><a href="#非递归框架" class="headerlink" title="非递归框架"></a>非递归框架</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> x[n];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">backtrack</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (i &gt;= <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (ExistSonNode(t)) &#123;</span><br><span class="line"><span class="keyword">for</span> (j = 下界; j &lt;= 上界; j++) &#123;</span><br><span class="line">x[i]取一个可能的值</span><br><span class="line"><span class="keyword">if</span> (constraint(i) &amp;&amp; bound(i)) &#123;</span><br><span class="line"><span class="keyword">if</span> (x是一个可行解)</span><br><span class="line">输出x</span><br><span class="line"><span class="keyword">else</span> i++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> i--;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 我们不难看出，非递归框架是通过下标的变化来实现搜索的回溯的，例题的非递归实现如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">backtrack</span><span class="params">(<span class="keyword">int</span> a[],<span class="keyword">int</span> n,<span class="keyword">int</span> x[])</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i1 = <span class="number">0</span>; i1 &lt; <span class="number">2</span>; i1++) &#123;</span><br><span class="line">x[i] = i1; i++;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i2 = <span class="number">0</span>; i2 &lt; <span class="number">2</span>; i2++) &#123;</span><br><span class="line">x[i] = i2; i++;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i3 = <span class="number">0</span>; i3 &lt; <span class="number">2</span>; i3++) &#123;</span><br><span class="line">x[i] = i3;</span><br><span class="line"><span class="keyword">if</span> (bound(n, x))</span><br><span class="line">Disp(a, n, x);</span><br><span class="line">&#125;</span><br><span class="line">i--;</span><br><span class="line">&#125;</span><br><span class="line">i--;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><p>著名的n皇后问题就非常适合用回溯法的思想来求解。</p><p>在n*n的方格棋盘上放置n个皇后，要求每个皇后不同行、不同列、不同左右对角线。</p><p>分析：可以定义一个数组，用来存放皇后的位置，下标代表行数，值代表列数，如q[2]=3就表示第二行第三列放置了一个皇后。那么这个数组就是我们的解空间，第一行任取一个不大于n的值，第二行任取不与第一个冲突的值…</p><p>实现代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 20</span></span><br><span class="line"><span class="keyword">int</span> q[MAX];</span><br><span class="line"><span class="keyword">int</span> n = <span class="number">4</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Disp</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;(&quot;</span> &lt;&lt; i &lt;&lt; <span class="string">&quot;,&quot;</span> &lt;&lt; q[i] &lt;&lt; <span class="string">&quot;)&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">bound</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (i == <span class="number">1</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt; i; k++) &#123;</span><br><span class="line"><span class="keyword">if</span> (q[k] == j)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">abs</span>(k - i) == <span class="built_in">abs</span>(q[k] - q[i]))</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">queens</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (i &gt; n)</span><br><span class="line">Disp();</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= <span class="number">4</span>; j++) &#123;</span><br><span class="line">q[i] = j;</span><br><span class="line"><span class="keyword">if</span> (bound(i, j))</span><br><span class="line">queens(i + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">queens(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;回溯法&quot;&gt;&lt;a href=&quot;#回溯法&quot; class=&quot;headerlink&quot; title=&quot;回溯法&quot;&gt;&lt;/a&gt;回溯法&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;回溯法，简单的来说，就是搜索所有可能的解得过程中，如果搜索到某一结点不满足条件了，就回溯至上一个结点，改变上一个结点的值（</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>动态规划</title>
    <link href="http://example.com/2021/01/22/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    <id>http://example.com/2021/01/22/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</id>
    <published>2021-01-22T02:04:58.341Z</published>
    <updated>2021-01-31T04:08:03.465Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是动态规划"><a href="#什么是动态规划" class="headerlink" title="什么是动态规划"></a>什么是动态规划</h2><p>我们首先看一下递归求斐波那契数列的函数：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fib</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (n == <span class="number">1</span> || n == <span class="number">2</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> fib(n - <span class="number">1</span>) + fib(n - <span class="number">2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>假设我们输入的参数是5，那么求解过程为：</p><p><img src="//tvax2.sinaimg.cn/large/007dBPqAgy1gk5wxvw6fsj30cb0a1q2y.jpg"></p><p>会发现其中有重复的计算，如fib(3)就算了两次，如果我们将规模扩大，那么重复的计算会更多。</p><p>为了避免重复计算，我们可以创建一个全局数组，存储fib(n)的值，当需要fib(n)时，可直接参与运算，而不需要再次递归。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Max 20</span></span><br><span class="line"><span class="keyword">int</span> dp[Max] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fib</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">dp[<span class="number">1</span>] = dp[<span class="number">2</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">3</span>; i &lt;= n; i++)</span><br><span class="line">dp[i] = dp[i - <span class="number">1</span>] + dp[i - <span class="number">2</span>];</span><br><span class="line"><span class="keyword">return</span> dp[n];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样就使时间复杂度从指数级降为了O(n),大大提高了算法效率。<br>这就是经典的动态规划算法的应用。</p><h2 id="动态规划的适用问题"><a href="#动态规划的适用问题" class="headerlink" title="动态规划的适用问题"></a>动态规划的适用问题</h2><p>动态规划的核心思想就是把多阶段的过程转化为很多单阶段过程，利用各阶段之间的关系求解。</p><p>动态规划算法的使用要包含3个条件：</p><p>（1）<strong>最优性原理</strong>：指问题的最优解所包含的子问题的解也是最优的，这样便可通过最优子问题的解最终求出问题的最优解。</p><p>（2）<strong>无后效性</strong>：一个确定了的状态不受后面状态的影响，比如一旦求出fib(3)=2,它就一直等于2，与之后的计算无关。</p><p>（3）<strong>有重叠子问题</strong>：即子问题之间有联系，比如斐波那契数列中新的一项等于前两项之和。</p><h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><p>求将正整数n无序拆分成最大数为k的拆分方案个数，要求所有的拆分方案不重复。</p><p>分析：首先我们看能否将这个问题转化为多个单阶段过程，题目要求最大值为k，那么我们可以将拆分分为两种：一种包含k；另一种不包含k。对于包含k的方案，可以理解为一个k和后面剩余的数，而后面的数中还有可能再次出现k,就相当于在把后面和为n-k的数进行拆分，最大值为k；假设存在一个函数f(n,k)能表示题目要求的拆分次数，那么包含k的方案就有f(n-k,k)种。同样，对于不包含k的方案，既然不包含他的最大值，我们就可以直接将其最大值改为k-1，即f(n,k-1);这样，我们就找到了当前状态与前面状态的关系：f(n,k)=f(n-k,k)+f(n,k-1),很显然它满足我们上面所说的3个条件，那么就可以使用动态规划求解。</p><p>确定了可以使用动态规划之后，最重要的一步就是找到状态方程，也就是前后子问题之间的关系。在上面推出的f(n,k)=f(n-k)+f(n,k-1)只是我们默认n&gt;k且n,k均不唯一的情况。完整考虑得出的状态方程如下：</p><p>f(n,k)=</p><p>1            n=1 or k=1<br>f(n,n)              n&lt;k<br>f(n,n-1)+1          n=k<br>f(n-k,k)+f(n,k-1)   n&gt;k</p><p>代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Max 20</span></span><br><span class="line"><span class="keyword">int</span> dp[Max][Max] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= k; j++) &#123;</span><br><span class="line"><span class="keyword">if</span> (i == <span class="number">1</span> || j == <span class="number">1</span>)</span><br><span class="line">dp[i][j] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (i &lt; j)</span><br><span class="line">dp[i][j] = dp[i][i];</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (i == j)</span><br><span class="line">dp[i][j] = dp[i][i<span class="number">-1</span>]+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">dp[i][j] = dp[i - j][j] + dp[i][j - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> dp[n][k];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此题也可以使用递归解决，读者可自行尝试，比较体会动态规划算法的优越性。</p><h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><p>动态规划在一些情况下可以进行空间上的优化。比如最初的求斐波那契数列的问题，我们可以发现，实际参与计算就是三个量：fib(n),fib(n-1)和fib(n-2)，但是我们却使用了长度至少为n的数组。实际上我们只需要定义一个长度为3的数组，通过数组的循环滚动使用来完成计算，我们称其为<strong>滚动数组</strong>。</p><p>代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> dp[<span class="number">3</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fib</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">dp[<span class="number">1</span>] = dp[<span class="number">2</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">3</span>; i &lt;= n; i++)</span><br><span class="line">dp[i%<span class="number">3</span>] = dp[(i - <span class="number">1</span>)%<span class="number">3</span>] + dp[(i - <span class="number">2</span>) % <span class="number">3</span>];</span><br><span class="line"><span class="keyword">return</span> dp[n % <span class="number">3</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;什么是动态规划&quot;&gt;&lt;a href=&quot;#什么是动态规划&quot; class=&quot;headerlink&quot; title=&quot;什么是动态规划&quot;&gt;&lt;/a&gt;什么是动态规划&lt;/h2&gt;&lt;p&gt;我们首先看一下递归求斐波那契数列的函数：&lt;/p&gt;
&lt;figure class=&quot;highlight </summary>
      
    
    
    
    
  </entry>
  
</feed>
